// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OCFX_SPA.Data;

namespace OCFX_SPA.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190818060822_0")]
    partial class _0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired();

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OCFX.DataModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressTypeName");

                    b.Property<string>("CityName");

                    b.Property<int?>("ProfileId");

                    b.Property<string>("StateName");

                    b.Property<string>("StreetName");

                    b.Property<int>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("OCFX.DataModels.Archetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background");

                    b.Property<int>("ConcentrationMod");

                    b.Property<int>("ConstitutionMod");

                    b.Property<int>("DexterityMod");

                    b.Property<int>("FitType");

                    b.Property<int>("MotivationMod");

                    b.Property<int>("SkillMod");

                    b.Property<int>("SpeedMod");

                    b.Property<string>("Story");

                    b.Property<int>("StrengthMod");

                    b.Property<string>("Strengths");

                    b.Property<string>("Weakness");

                    b.HasKey("Id");

                    b.ToTable("Archetypes");
                });

            modelBuilder.Entity("OCFX.DataModels.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AntagonistId");

                    b.Property<string>("Details");

                    b.Property<int?>("DietId");

                    b.Property<string>("Lore");

                    b.Property<string>("Name");

                    b.Property<int>("Risk");

                    b.HasKey("Id");

                    b.HasIndex("AntagonistId");

                    b.HasIndex("DietId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("OCFX.DataModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePosted");

                    b.Property<int>("EntryId");

                    b.Property<int>("PostId");

                    b.Property<int>("ProfileId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("OCFX.DataModels.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Carbohydrates");

                    b.Property<string>("DietName");

                    b.Property<int>("DietTypeName");

                    b.Property<int>("Fats");

                    b.Property<int>("Protein");

                    b.HasKey("Id");

                    b.ToTable("Diet");
                });

            modelBuilder.Entity("OCFX.DataModels.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background");

                    b.Property<int>("CON");

                    b.Property<int>("DEX");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("HP");

                    b.Property<int>("MVN");

                    b.Property<int?>("QuestId");

                    b.Property<int>("SPD");

                    b.Property<int>("STR");

                    b.Property<int>("VIT");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("Encounter");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Encounter");
                });

            modelBuilder.Entity("OCFX.DataModels.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EquipDescription");

                    b.Property<string>("EquipName");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("OCFX.DataModels.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("ExerType");

                    b.Property<string>("Name");

                    b.Property<int>("TargetedMuscles");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("OCFX.DataModels.Friend", b =>
                {
                    b.Property<int>("ProfileId");

                    b.Property<int>("FriendId");

                    b.Property<int>("ActionUserId");

                    b.Property<int>("FriendshipConfirmer");

                    b.Property<DateTime?>("FriendshipStart");

                    b.HasKey("ProfileId", "FriendId");

                    b.HasAlternateKey("FriendId", "ProfileId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("OCFX.DataModels.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int?>("LeaderId");

                    b.Property<int>("MeetingDate");

                    b.Property<int>("MeetingFrequency");

                    b.Property<DateTime>("MeetingTime");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("Gym");
                });

            modelBuilder.Entity("OCFX.DataModels.GymRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquipmentId");

                    b.Property<int>("GymId");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("GymId");

                    b.ToTable("GymRelation");
                });

            modelBuilder.Entity("OCFX.DataModels.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubId");

                    b.Property<DateTime>("JoinDate");

                    b.Property<int?>("MemberId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("MemberId")
                        .IsUnique()
                        .HasFilter("[MemberId] IS NOT NULL");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("OCFX.DataModels.OCFXUser", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("NameChangedDate");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("ProfileId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OCFX.DataModels.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaCode");

                    b.Property<int>("PhoneNumber");

                    b.Property<int>("PhoneTypeName");

                    b.Property<int?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("OCFX.DataModels.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption");

                    b.Property<DateTime>("DateAdded");

                    b.Property<int>("ProfileId");

                    b.Property<int>("Type");

                    b.Property<string>("URL");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("OCFX.DataModels.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePosted");

                    b.Property<int>("EntryId");

                    b.Property<int>("ProfileId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("OCFX.DataModels.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackStory");

                    b.Property<int?>("CampaignId");

                    b.Property<int?>("ClassId");

                    b.Property<int>("ConcentrationStat");

                    b.Property<int>("ConstitutionStat");

                    b.Property<DateTime>("DOB");

                    b.Property<int>("DexterityStat");

                    b.Property<string>("DriveStory");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("Goals");

                    b.Property<int>("Height");

                    b.Property<int?>("HipMeasurement");

                    b.Property<string>("LastName");

                    b.Property<int>("MotivationStat");

                    b.Property<int?>("NeckMeasurement");

                    b.Property<int?>("QuestId");

                    b.Property<int>("SpeedStat");

                    b.Property<int>("StrengthStat");

                    b.Property<int?>("WaistMeasurement");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ClassId");

                    b.HasIndex("QuestId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("OCFX.DataModels.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CampaignId");

                    b.Property<string>("QuestName");

                    b.Property<string>("QuestStory");

                    b.Property<int>("QuestStyle");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("OCFX.DataModels.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId");

                    b.Property<DateTime>("DatePosted");

                    b.Property<int>("EntryId");

                    b.Property<int>("ProfileId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("EntryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("OCFX.DataModels.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndTime");

                    b.Property<int?>("GymId");

                    b.Property<int>("Interval");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("OCFX.DataModels.Shout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChainIdentifier");

                    b.Property<DateTime?>("DateOpened");

                    b.Property<DateTime>("DateSent");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("MessageText");

                    b.Property<int>("ReceiverId");

                    b.Property<int>("SenderId");

                    b.Property<int>("Status");

                    b.Property<string>("SubjectText");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Shout");
                });

            modelBuilder.Entity("OCFX.DataModels.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AirCost");

                    b.Property<int?>("ArchetypeId");

                    b.Property<TimeSpan>("Cooldown");

                    b.Property<string>("Description");

                    b.Property<int>("Effect");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("Name");

                    b.Property<int>("Style");

                    b.Property<int>("Target");

                    b.Property<string>("Warning");

                    b.HasKey("Id");

                    b.HasIndex("ArchetypeId");

                    b.HasIndex("EncounterId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("OCFX.DataModels.WeightMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int?>("ProfileId");

                    b.Property<int?>("ProgressPhotoId");

                    b.Property<double>("Weight")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProgressPhotoId");

                    b.ToTable("WeightMeasurement");
                });

            modelBuilder.Entity("OCFX.DataModels.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<int>("Duration");

                    b.Property<int>("TargetedMuscles");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("OCFX.DataModels.WorkoutProgram", b =>
                {
                    b.Property<int>("WorkoutProgramId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CampaignId");

                    b.Property<string>("Description");

                    b.Property<int>("ExerciseId");

                    b.Property<int>("Order");

                    b.Property<int>("Repetitions");

                    b.Property<int>("Sets");

                    b.Property<int>("WorkoutId");

                    b.HasKey("WorkoutProgramId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutProgram");
                });

            modelBuilder.Entity("OCFX.DataModels.WorkoutSetLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("Duration");

                    b.Property<string>("Notes");

                    b.Property<int?>("ProfileId");

                    b.Property<int?>("WorkoutId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutSetLog");
                });

            modelBuilder.Entity("OCFX.DataModels.BossEncounter", b =>
                {
                    b.HasBaseType("OCFX.DataModels.Encounter");

                    b.Property<int>("Armor");

                    b.Property<int?>("BurstSkillId");

                    b.Property<string>("Name");

                    b.HasIndex("BurstSkillId");

                    b.ToTable("Bosses");

                    b.HasDiscriminator().HasValue("BossEncounter");
                });

            modelBuilder.Entity("OCFX.DataModels.PersonalEncounter", b =>
                {
                    b.HasBaseType("OCFX.DataModels.Encounter");

                    b.Property<int?>("CampaignId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasIndex("CampaignId");

                    b.ToTable("NPCs");

                    b.HasDiscriminator().HasValue("PersonalEncounter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OCFX.DataModels.OCFXUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OCFX.DataModels.OCFXUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.OCFXUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OCFX.DataModels.OCFXUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Address", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Profile")
                        .WithMany("Addresses")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.Campaign", b =>
                {
                    b.HasOne("OCFX.DataModels.BossEncounter", "Antagonist")
                        .WithMany()
                        .HasForeignKey("AntagonistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCFX.DataModels.Diet", "Nutrition")
                        .WithMany()
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.Comment", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Encounter", b =>
                {
                    b.HasOne("OCFX.DataModels.Quest", null)
                        .WithMany("Encounters")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.Friend", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Profile", "Following")
                        .WithMany("Following")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Gym", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.GymRelation", b =>
                {
                    b.HasOne("OCFX.DataModels.Equipment", "Equipment")
                        .WithMany("Gyms")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Gym", "Gym")
                        .WithMany("Amenities")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Membership", b =>
                {
                    b.HasOne("OCFX.DataModels.Gym", "Club")
                        .WithMany("Members")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCFX.DataModels.Profile", "Member")
                        .WithOne("ClubMemberShip")
                        .HasForeignKey("OCFX.DataModels.Membership", "MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.OCFXUser", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Profile")
                        .WithOne("FitUser")
                        .HasForeignKey("OCFX.DataModels.OCFXUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Phone", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Profile")
                        .WithMany("Phones")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.Photo", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", null)
                        .WithMany("Photos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Post", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Entry")
                        .WithMany("Entries")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Profile", "Profile")
                        .WithMany("Posts")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Profile", b =>
                {
                    b.HasOne("OCFX.DataModels.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCFX.DataModels.Archetype", "FitStyle")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCFX.DataModels.Quest", "Quest")
                        .WithMany("CurrentPlayers")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.Quest", b =>
                {
                    b.HasOne("OCFX.DataModels.Campaign", "Campaign")
                        .WithMany("Quests")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.Reply", b =>
                {
                    b.HasOne("OCFX.DataModels.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Profile", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Session", b =>
                {
                    b.HasOne("OCFX.DataModels.Gym", null)
                        .WithMany("Meetings")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.Shout", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Profile", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.Skill", b =>
                {
                    b.HasOne("OCFX.DataModels.Archetype", null)
                        .WithMany("SkillSet")
                        .HasForeignKey("ArchetypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCFX.DataModels.Encounter", null)
                        .WithMany("SkillSet")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.WeightMeasurement", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Profile")
                        .WithMany("Weights")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCFX.DataModels.Photo", "ProgressPhoto")
                        .WithMany()
                        .HasForeignKey("ProgressPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.WorkoutProgram", b =>
                {
                    b.HasOne("OCFX.DataModels.Campaign", null)
                        .WithMany("CampaignPrograms")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCFX.DataModels.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCFX.DataModels.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCFX.DataModels.WorkoutSetLog", b =>
                {
                    b.HasOne("OCFX.DataModels.Profile", "Profile")
                        .WithMany("WorkoutHistory")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCFX.DataModels.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.BossEncounter", b =>
                {
                    b.HasOne("OCFX.DataModels.Skill", "BurstSkill")
                        .WithMany()
                        .HasForeignKey("BurstSkillId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OCFX.DataModels.PersonalEncounter", b =>
                {
                    b.HasOne("OCFX.DataModels.Campaign", null)
                        .WithMany("Minions")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
